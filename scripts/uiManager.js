// uiManager.js - UI Í¥ÄÎ¶¨ Î∞è Í≤åÏûÑ ÏÉÅÌÉú ÌëúÏãú
import { CardDeck } from './cardDeck.js';

export class UIManager {
    constructor(gameManager, settingsManager) {
        this.gameManager = gameManager;
        this.settingsManager = settingsManager;
        
        // DOM ÏöîÏÜå
        this.screenElements = {
            'start-screen': document.getElementById('start-screen'),
            'game-screen': document.getElementById('game-screen'),
            'result-screen': document.getElementById('result-screen'),
            'tutorial-screen': document.getElementById('tutorial-screen'),
            'settings-screen': document.getElementById('settings-screen')
        };
        
        this.boardCardsElement = document.getElementById('board-cards');
        this.playerCardsElement = document.getElementById('player-cards');
        this.opponentCardsElement = document.querySelector('.opponent-cards');
        this.gameStatusElement = document.getElementById('game-status');
        this.playerScoreElement = document.getElementById('player-score');
        this.aiScoreElement = document.getElementById('ai-score');
        this.goStopDialog = document.getElementById('go-stop-dialog');
        this.currentPointsElement = document.getElementById('current-points');
        this.countdownElement = document.getElementById('countdown-timer');
        
        // Í≤åÏûÑ Îß§ÎãàÏ†Ä Ïù¥Î≤§Ìä∏ Ïó∞Í≤∞
        this.initGameEvents();
        
        // Ïπ¥Îìú Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà
        this.selectedCardIndex = -1;
    }
    
    // Í≤åÏûÑ Í≤∞Í≥º ÌôîÎ©¥ ÌëúÏãú
    showGameResult(result) {
        const resultTitle = document.getElementById('result-title');
        const resultIcon = document.getElementById('result-icon');
        const resultMessage = document.getElementById('result-message');
        const finalScore = document.getElementById('final-score');
        const earnedCoins = document.getElementById('earned-coins');
        
        if (result.isWin) {
            resultTitle.textContent = 'ÏäπÎ¶¨!';
            resultIcon.textContent = 'üéâ';
            resultMessage.textContent = 'Ï∂ïÌïòÌï©ÎãàÎã§! Í≤åÏûÑÏóêÏÑú Ïù¥Í≤ºÏäµÎãàÎã§.';
        } else {
            resultTitle.textContent = 'Ìå®Î∞∞';
            resultIcon.textContent = 'üò¢';
            resultMessage.textContent = 'ÏïÑÏâΩÍ≤åÎèÑ Ï°åÏäµÎãàÎã§. Îã§Ïãú ÎèÑÏ†ÑÌï¥Î≥¥ÏÑ∏Ïöî!';
        }
        
        finalScore.textContent = result.score;
        earnedCoins.textContent = result.coins;
        
        // Í≤∞Í≥º ÌôîÎ©¥ ÌëúÏãú
        this.showScreen('result-screen');
    }
    
    // ÌäπÏàò Ìö®Í≥º ÌëúÏãú (Ï™Ω, Îî∞Îã• Îì±)
    showSpecialEffect(action) {
        // Í∞ÑÎã®Ìïú Íµ¨ÌòÑ: ÏïåÎ¶ºÏúºÎ°ú ÌëúÏãú
        if (action) {
            alert(action.message);
        }
    }
    
    // ÌôîÎ©¥ Ï†ÑÌôò
    showScreen(screenId) {
        // Î™®Îì† ÌôîÎ©¥ Ïà®Í∏∞Í∏∞
        Object.values(this.screenElements).forEach(element => {
            if (element) {
                element.classList.remove('active');
            }
        });
        
        // ÏßÄÏ†ïÎêú ÌôîÎ©¥ ÌëúÏãú
        if (this.screenElements[screenId]) {
            this.screenElements[screenId].classList.add('active');
        }
    }
    
    // ÌîåÎ†àÏù¥Ïñ¥ Ïπ¥Îìú ÌôúÏÑ±Ìôî/ÎπÑÌôúÏÑ±Ìôî
    enablePlayerCards(enabled) {
        if (!this.playerCardsElement) return;
        
        const playerCards = this.playerCardsElement.querySelectorAll('.player-card');
        
        playerCards.forEach(card => {
            if (enabled) {
                card.classList.remove('disabled');
            } else {
                card.classList.add('disabled');
            }
        });
    }
    
    // Í≤åÏûÑ Îß§ÎãàÏ†Ä Ïù¥Î≤§Ìä∏ Ï¥àÍ∏∞Ìôî
    initGameEvents() {
        if (this.gameManager) {
            this.gameManager.onGameStateChanged = (state) => {
                this.updateGameUI(state);
            };
            
            this.gameManager.onCardsDealt = (state) => {
                this.renderGameBoard(state);
            };
            
            this.gameManager.onPlayerTurn = () => {
                if (this.gameStatusElement) {
                    this.gameStatusElement.textContent = 'ÎãπÏã†Ïùò Ï∞®Î°Ä';
                }
            };
            
            this.gameManager.onAITurn = (data) => {
                if (this.gameStatusElement) {
                    this.gameStatusElement.textContent = 'AI Ï∞®Î°Ä';
                }
                this.highlightAICard(data.card);
            };
            
            this.gameManager.onCardPlayed = (data) => {
                this.renderGameBoard(data.state);
                
                // ÌäπÏàò Ìö®Í≥º (Ï™Ω, Îî∞Îã• Îì±) ÌëúÏãú
                if (data.lastAction) {
                    this.showSpecialEffect(data.lastAction);
                }
            };
            
            this.gameManager.onGoStopPrompt = (data) => {
                this.showGoStopDialog(data.currentPoints);
            };
            
            this.gameManager.onGameOver = (result) => {
                this.showGameResult(result);
            };
        }
    }
    
    // Í≤åÏûÑ UI ÏóÖÎç∞Ïù¥Ìä∏
    updateGameUI(state) {
        // Í≤åÏûÑ ÏÉÅÌÉúÏóê Îî∞Î•∏ UI ÏóÖÎç∞Ïù¥Ìä∏
        if (!state) return;
        
        switch (state.phase) {
            case 'playerTurn':
                if (this.gameStatusElement) {
                    this.gameStatusElement.textContent = 'ÎãπÏã†Ïùò Ï∞®Î°Ä';
                }
                this.enablePlayerCards(true);
                break;
                
            case 'aiTurn':
                if (this.gameStatusElement) {
                    this.gameStatusElement.textContent = 'AI Ï∞®Î°Ä';
                }
                this.enablePlayerCards(false);
                break;
                
            case 'goStop':
                if (this.gameStatusElement) {
                    this.gameStatusElement.textContent = 'Í≥† / Ïä§ÌÜ± ÏÑ†ÌÉù';
                }
                this.enablePlayerCards(false);
                break;
                
            case 'gameOver':
                if (this.gameStatusElement) {
                    this.gameStatusElement.textContent = 'Í≤åÏûÑ Ï¢ÖÎ£å';
                }
                this.enablePlayerCards(false);
                break;
        }
        
        // Ï†êÏàò ÏóÖÎç∞Ïù¥Ìä∏
        if (this.playerScoreElement) {
            this.playerScoreElement.textContent = state.playerScore;
        }
        if (this.aiScoreElement) {
            this.aiScoreElement.textContent = state.aiScore;
        }
    }
    
    // Í≤åÏûÑ Î≥¥Îìú Î†åÎçîÎßÅ
    renderGameBoard(state) {
        if (!state) return;
        
        // Î∞îÎã• Ïπ¥Îìú Î†åÎçîÎßÅ
        this.renderBoardCards(state.boardCards);
        
        // ÌîåÎ†àÏù¥Ïñ¥ Ïπ¥Îìú Î†åÎçîÎßÅ
        this.renderPlayerCards(state.playerCards);
        
        // AI Ïπ¥Îìú Î†åÎçîÎßÅ (Îí∑Î©¥Îßå ÌëúÏãú)
        this.renderAICards(state.aiCards.length);
    }
    
    // Î∞îÎã• Ïπ¥Îìú Î†åÎçîÎßÅ
    renderBoardCards(boardCards) {
        if (!this.boardCardsElement || !boardCards) return;
        
        this.boardCardsElement.innerHTML = '';
        
        boardCards.forEach(card => {
            const cardElement = this.createCardElement(card, false);
            this.boardCardsElement.appendChild(cardElement);
        });
    }
    
    // ÌîåÎ†àÏù¥Ïñ¥ Ïπ¥Îìú Î†åÎçîÎßÅ
    renderPlayerCards(playerCards) {
        if (!this.playerCardsElement || !playerCards) return;
        
        this.playerCardsElement.innerHTML = '';
        this.selectedCardIndex = -1;
        
        playerCards.forEach((card, index) => {
            const cardElement = this.createCardElement(card, true);
            
            // Ïπ¥Îìú ÏÑ†ÌÉù Ïù¥Î≤§Ìä∏ Ï∂îÍ∞Ä
            cardElement.addEventListener('click', () => {
                this.selectPlayerCard(index);
            });
            
            this.playerCardsElement.appendChild(cardElement);
        });
    }
    
    // AI Ïπ¥Îìú Î†åÎçîÎßÅ (Îí∑Î©¥)
    renderAICards(cardCount) {
        if (!this.opponentCardsElement) return;
        
        this.opponentCardsElement.innerHTML = '';
        
        for (let i = 0; i < cardCount; i++) {
            const cardElement = document.createElement('div');
            cardElement.className = 'card card-back';
            this.opponentCardsElement.appendChild(cardElement);
        }
    }
    
    // Ïπ¥Îìú ÏöîÏÜå ÏÉùÏÑ±
    createCardElement(card, isPlayer) {
        if (!card) return document.createElement('div');
        
        const cardElement = document.createElement('div');
        cardElement.className = 'card';
        cardElement.dataset.id = card.id;
        cardElement.dataset.month = card.month;
        cardElement.dataset.type = card.type;
        
        // Ïõî ÌëúÏãú
        const monthElement = document.createElement('div');
        monthElement.className = 'card-month';
        monthElement.textContent = `${card.month}Ïõî`;
        cardElement.appendChild(monthElement);
        
        // Ï¢ÖÎ•ò ÌëúÏãú
        const typeElement = document.createElement('div');
        typeElement.className = 'card-type';
        typeElement.textContent = CardDeck.getMonthName(card.month);
        cardElement.appendChild(typeElement);
        
        // ÌîåÎ†àÏù¥Ïñ¥ Ïπ¥ÎìúÏù∏ Í≤ΩÏö∞ ÏÑ†ÌÉù Í∞ÄÎä•ÌïòÎèÑÎ°ù ÏÑ§Ï†ï
        if (isPlayer) {
            cardElement.classList.add('player-card');
        } else {
            // Î∞îÎã• Ïπ¥ÎìúÏù∏ Í≤ΩÏö∞ ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Ï∂îÍ∞Ä
            cardElement.addEventListener('click', () => {
                if (this.selectedCardIndex !== -1) {
                    this.selectBoardCard(card);
                }
            });
        }
        
        return cardElement;
    }
    
    // ÌîåÎ†àÏù¥Ïñ¥ Ïπ¥Îìú ÏÑ†ÌÉù
    selectPlayerCard(index) {
        if (!this.playerCardsElement || !this.gameManager) return;
        
        // Í≤åÏûÑ ÏÉÅÌÉúÍ∞Ä ÌîåÎ†àÏù¥Ïñ¥ ÌÑ¥Ïù¥ ÏïÑÎãàÎ©¥ Î¨¥Ïãú
        if (this.gameManager.getCurrentState().phase !== 'playerTurn') {
            return;
        }
        
        // Ïù¥Ï†Ñ ÏÑ†ÌÉù Ìï¥Ï†ú
        const playerCards = this.playerCardsElement.querySelectorAll('.player-card');
        playerCards.forEach(card => card.classList.remove('selected'));
        
        // ÏÉà Ïπ¥Îìú ÏÑ†ÌÉù
        if (this.selectedCardIndex === index) {
            // Í∞ôÏùÄ Ïπ¥Îìú ÌÅ¥Î¶≠ Ïãú ÏÑ†ÌÉù Ìï¥Ï†ú
            this.selectedCardIndex = -1;
        } else {
            // ÏÉà Ïπ¥Îìú ÏÑ†ÌÉù
            if (playerCards[index]) {
                playerCards[index].classList.add('selected');
            }
            this.selectedCardIndex = index;
            
            // Í≤åÏûÑ Îß§ÎãàÏ†ÄÏóê ÏÑ†ÌÉù ÏïåÎ¶º
            this.gameManager.selectCard(index);
            
            // Îß§Ïπ≠ÎêòÎäî Î∞îÎã• Ïπ¥Îìú ÌïòÏù¥ÎùºÏù¥Ìä∏
            this.highlightMatchingCards();
        }
    }
    
    // Î∞îÎã• Ïπ¥Îìú ÏÑ†ÌÉù
    selectBoardCard(card) {
        if (this.selectedCardIndex === -1 || !this.gameManager || !card) return;
        
        // Í≤åÏûÑ Îß§ÎãàÏ†ÄÏóêÍ≤å Ïπ¥Îìú ÏÑ†ÌÉù Ï†ÑÎã¨
        const boardCards = this.gameManager.getCurrentState().boardCards;
        const index = boardCards.findIndex(c => c.id === card.id);
        
        if (index !== -1) {
            const success = this.gameManager.selectBoardCard(index);
            
            if (success) {
                // ÏÑ†ÌÉù Ï¥àÍ∏∞Ìôî
                this.selectedCardIndex = -1;
                
                // ÌïòÏù¥ÎùºÏù¥Ìä∏ Ï†úÍ±∞
                if (this.boardCardsElement) {
                    const boardCardElements = this.boardCardsElement.querySelectorAll('.card');
                    boardCardElements.forEach(card => card.classList.remove('highlight'));
                }
            }
        }
    }
    
    // Îß§Ïπ≠ÎêòÎäî Î∞îÎã• Ïπ¥Îìú ÌïòÏù¥ÎùºÏù¥Ìä∏
    highlightMatchingCards() {
        if (!this.boardCardsElement || !this.gameManager) return;
        
        // Î™®Îì† ÌïòÏù¥ÎùºÏù¥Ìä∏ Ï†úÍ±∞
        const boardCardElements = this.boardCardsElement.querySelectorAll('.card');
        boardCardElements.forEach(card => card.classList.remove('highlight'));
        
        // ÌòÑÏû¨ Í≤åÏûÑ ÏÉÅÌÉú Î∞è ÏÑ†ÌÉùÎêú Ïπ¥Îìú Í∞ÄÏ†∏Ïò§Í∏∞
        const state = this.gameManager.getCurrentState();
        if (!state || !state.selectedCard) return;
        
        // ÏÑ†ÌÉùÎêú Ïπ¥ÎìúÏôÄ Í∞ôÏùÄ ÏõîÏùÑ Í∞ÄÏßÑ Î∞îÎã• Ïπ¥Îìú ÌïòÏù¥ÎùºÏù¥Ìä∏
        boardCardElements.forEach(cardElement => {
            if (parseInt(cardElement.dataset.month) === state.selectedCard.month) {
                cardElement.classList.add('highlight');
            }
        });
    }
    
    // AI Ïπ¥Îìú ÌïòÏù¥ÎùºÏù¥Ìä∏ (AI ÌÑ¥Ïóê ÏÇ¨Ïö©)
    highlightAICard(card) {
        if (!this.opponentCardsElement) return;
        
        // AI Ïπ¥ÎìúÎäî Îí∑Î©¥ÏúºÎ°úÎßå ÌëúÏãúÎêòÎØÄÎ°ú Ïã§Ï†úÎ°ú ÌïòÏù¥ÎùºÏù¥Ìä∏Ìï† Ïàò ÏóÜÏùå
        // ÌïòÏßÄÎßå Ïï†ÎãàÎ©îÏù¥ÏÖò Ìö®Í≥ºÎ•º ÏúÑÌï¥ ÏûÑÏùòÏùò Ïπ¥ÎìúÎ•º ÌïòÏù¥ÎùºÏù¥Ìä∏
        const aiCardElements = this.opponentCardsElement.querySelectorAll('.card');
        if (aiCardElements.length > 0) {
            const randomIndex = Math.floor(Math.random() * aiCardElements.length);
            
            // ÌïòÏù¥ÎùºÏù¥Ìä∏ Ìö®Í≥º
            aiCardElements[randomIndex].classList.add('highlight');
            
            // Ïû†Ïãú ÌõÑ ÌïòÏù¥ÎùºÏù¥Ìä∏ Ï†úÍ±∞
            setTimeout(() => {
                aiCardElements[randomIndex].classList.remove('highlight');
            }, 1000);
        }
    }
    
    // Í≥†/Ïä§ÌÜ± Îã§Ïù¥ÏñºÎ°úÍ∑∏ ÌëúÏãú
    showGoStopDialog(currentPoints) {
        if (!this.goStopDialog || !this.currentPointsElement || 
            !this.countdownElement || !this.gameManager) return;
        
        this.currentPointsElement.textContent = currentPoints;
        this.goStopDialog.classList.remove('hidden');
        
        // Ïπ¥Ïö¥Ìä∏Îã§Ïö¥ ÏãúÏûë
        let countdown = 3;
        this.countdownElement.textContent = countdown;
        
        const timer = setInterval(() => {
            countdown--;
            this.countdownElement.textContent = countdown;
            
            if (countdown <= 0) {
                clearInterval(timer);
                // ÏãúÍ∞Ñ Ï¥àÍ≥º Ïãú ÏûêÎèôÏúºÎ°ú 'Ïä§ÌÜ±' ÏÑ†ÌÉù
                this.gameManager.selectGoStop('stop');
                this.goStopDialog.classList.add('hidden');
            }
        }, 1000);
        
        // Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú ÌÉÄÏù¥Î®∏ Ï†ïÏßÄ
        const goBtn = document.getElementById('go-btn');
        const stopBtn = document.getElementById('stop-btn');
        
        if (goBtn) {
            goBtn.onclick = () => {
                clearInterval(timer);
                this.goStopDialog.classList.add('hidden');
                this.gameManager.selectGoStop('go');
            };
        }
        
        if (stopBtn) {
            stopBtn.onclick = () => {
                clearInterval(timer);
                this.goStopDialog.classList.add('hidden');
                this.gameManager.selectGoStop('stop');
            };
        }
    }
}
